@use "sass:map";
@use "sass:list";
@use "variables" as *;

// Media queries
@mixin media-up($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

@mixin media-down($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media screen and (max-width: (map.get($breakpoints, $breakpoint) - 1)) {
      @content;
    }
  }
}

// Flexbox
@mixin flex(
  $direction: row,
  $justify: flex-start,
  $align: stretch,
  $wrap: nowrap
) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Grid
@mixin grid($columns: 1, $gap: 0) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Typography
@mixin typography($size, $weight: 400, $line-height: 1.5) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

// Transitions
@mixin transition($properties...) {
  $transitions: ();
  @each $property in $properties {
    $transitions: list.append(
      $transitions,
      $property $transition-duration $transition-timing,
      comma
    );
  }
  transition: $transitions;
}

// Shadows
@mixin shadow($level: "md") {
  @if map.has-key($shadows, $level) {
    box-shadow: map.get($shadows, $level);
  }
}

// Truncate text
@mixin truncate($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
}

// Text ellipsis (alias for truncate with 1 line)
@mixin text-ellipsis {
  @include truncate(1);
}
